#include "lcdScreen.h"
#include "common.h"
#include "gpio.h"
#include "debug.h"
#include "string.h"

extern debug Debug;

#define XLevelL		0x00
#define XLevelH		0x10
#define XLevel		((XLevelH&0x0F)*16+XLevelL)
#define Max_Column	128
#define Max_Row		64
#define	Brightness	0xCF 
uint8_t _lcd_x = 0, _lcd_y = 0;
const uint8 F6x8[][6] =
{
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
	{ 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
	{ 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
	{ 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
	{ 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
	{ 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
	{ 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
	{ 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
	{ 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
	{ 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
	{ 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
	{ 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
	{ 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
	{ 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
	{ 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
	{ 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
	{ 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
	{ 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
	{ 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
	{ 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
	{ 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
	{ 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
	{ 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
	{ 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
	{ 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
	{ 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
	{ 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
	{ 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
	{ 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
	{ 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
	{ 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
	{ 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
	{ 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
	{ 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
	{ 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
	{ 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
	{ 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
	{ 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
	{ 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
	{ 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
	{ 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
	{ 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
	{ 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
	{ 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
	{ 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
	{ 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
	{ 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
	{ 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
	{ 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
	{ 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
	{ 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
	{ 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
	{ 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
	{ 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
	{ 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
	{ 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
	{ 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
	{ 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
	{ 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
	{ 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
	{ 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
	{ 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
	{ 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
	{ 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
	{ 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
	{ 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
	{ 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
	{ 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
	{ 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
	{ 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
	{ 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
	{ 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
	{ 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
	{ 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
	{ 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
	{ 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
	{ 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
	{ 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
	{ 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
	{ 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
	{ 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
	{ 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
};

const uint8 F14x16[][28] =
{
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"NULL"*/
	{0x00,0x00,0x08,0x20,0x08,0x10,0x88,0x19,0x68,0x05,0x18,0x01,0x0E,0x41,0xC8,0x7F,
	0x08,0x01,0x08,0x05,0x08,0x09,0x08,0x18,0x00,0x30,0x00,0x00},/*"东"*/
	{0x00,0x00,0x00,0x30,0x20,0x10,0x20,0x10,0x20,0x08,0xFE,0x7F,0x00,0x00,0x00,0x00,
	0xFE,0x7F,0x80,0x40,0x40,0x40,0x20,0x40,0x20,0x78,0x00,0x00},/*"北"*/
	{0x00,0x00,0x20,0x80,0x20,0x40,0x20,0x20,0x20,0x10,0x20,0x0C,0xFE,0x03,0xA2,0x01,
	0x20,0x06,0x20,0x08,0x20,0x30,0x20,0x60,0x20,0x40,0x00,0x00},/*"大"*/
	{0x00,0x00,0x80,0x00,0x60,0x04,0xA4,0x04,0xB8,0x04,0xA0,0x44,0xA4,0x44,0xA8,0x3E,
	0xA0,0x05,0xB8,0x04,0x26,0x04,0x60,0x04,0x20,0x04,0x00,0x00},/*"学"*/
	{0x00,0x00,0x02,0x00,0x42,0x00,0x33,0xFD,0x01,0x19,0x02,0x22,0x3D,0x02,0x21,0xE4,
	0x21,0x18,0x21,0x3C,0x3D,0xC4,0x03,0x02,0x04,0x02,0x00,0x00},/*"设"*/
	{0x00,0x02,0x00,0x02,0x7A,0x02,0x4B,0xFE,0x4B,0x5A,0x3B,0x5A,0x4F,0x5A,0x4B,0x5A,
	0x3B,0x5A,0x4B,0x5A,0x4B,0xFE,0x7C,0x02,0x00,0x02,0x00,0x00},/*"置"*/	
};

uint8 numToHex(uint8 begin, uint8 end){
	uint8 data = 0;
	
	for(int i = begin; i <= end; i++){
		data += 1<<i;
	}
	
	return data;
}

lcd::lcd(){
	GPIO_QuickInit(LCD_PORT,SCL_PIN, kGPIO_Mode_OPP);
	GPIO_SetBit(LCD_PORT, SCL_PIN);
	GPIO_QuickInit(LCD_PORT, SDA_PIN, kGPIO_Mode_OPP);
	GPIO_SetBit(LCD_PORT, SDA_PIN);
	GPIO_QuickInit(LCD_PORT, RST_PIN, kGPIO_Mode_OPP);
	GPIO_SetBit(LCD_PORT, RST_PIN);
	GPIO_QuickInit(LCD_PORT, DC_PIN, kGPIO_Mode_OPP);
	GPIO_SetBit(LCD_PORT, DC_PIN);
	GPIO_QuickInit(LCD_PORT, CS_PIN, kGPIO_Mode_OPP);
	GPIO_SetBit(LCD_PORT, CS_PIN);
	SCL_HIGH;
	CS_LOW ; ///使能信号端，拉低时正常使用
	RST_LOW;
	this->delayMs(50);
	RST_HIGH;
	
	this->writeCmd(0xae);//--turn off oled panel
	this->writeCmd(0x00);//---set low column address
	this->writeCmd(0x10);//---set high column address
	this->writeCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
	this->writeCmd(0x81);//--set contrast control register
	this->writeCmd(0xcf); // Set SEG Output Current Brightness
	this->writeCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
	this->writeCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
	this->writeCmd(0xa6);//--set normal display
	this->writeCmd(0xa8);//--set multiplex ratio(1 to 64)
	this->writeCmd(0x3f);//--1/64 duty
	this->writeCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
	this->writeCmd(0x00);//-not offset
	this->writeCmd(0xd5);//--set display clock divide ratio/oscillator frequency
	this->writeCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
	this->writeCmd(0xd9);//--set pre-charge period
	this->writeCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	this->writeCmd(0xda);//--set com pins hardware configuration
	this->writeCmd(0x12);
	this->writeCmd(0xdb);//--set vcomh
	this->writeCmd(0x40);//Set VCOM Deselect Level
	this->writeCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
	this->writeCmd(0x02);//
	this->writeCmd(0x8d);//--set Charge Pump enable/disable
	this->writeCmd(0x14);//--set(0x10) disable
	this->writeCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
	this->writeCmd(0xa6);// Disable Inverse Display On (0xa6/a7)
	this->writeCmd(0xaf);//--turn on oled panel
	this->fill(0x00);  //初始清屏
}

void lcd::writeData(uint8 data){
	uint8 i=8;
	CS_LOW;
	DC_HIGH;
	SCL_LOW;
	while(i--)
	{
		if(data&0x80) SDA_HIGH;
		else SDA_LOW;
		SCL_HIGH;
		asm("nop");;
		SCL_LOW;;
		data<<=1;
	}
	CS_HIGH;
}

void lcd::writeCmd(uint8 cmd){
	uint8 i=8;
	CS_LOW;
	DC_LOW;
	SCL_LOW;
	while(i--)
	{
		if(cmd&0x80){SDA_HIGH;}
		else{SDA_LOW;;}
		SCL_HIGH;;
		asm("nop");;
		SCL_LOW;;
		cmd<<=1;;
	}
	CS_HIGH;
}
void lcd::setXY(uint8 x, uint8 y){
	this->writeCmd(0xb0 + y);
	this->writeCmd((( x & 0xf0 ) >> 4) | 0x10);
	this->writeCmd( ( x & 0x0f ) | 0x00 );
}
void lcd::setPos(uint8 x, uint8 y){
	_lcd_x = x;
	_lcd_y = y;
	this->writeCmd(0xb0 + _lcd_y);
	this->writeCmd((( _lcd_x & 0xf0 ) >> 4) | 0x10);
	this->writeCmd( ( _lcd_x & 0x0f ) | 0x01 );
}

void lcd::delayMs(uint16 ms){
	uint16 a;
	while(ms)
	{
		a=16000;
		while(a--);
		ms--;
	}
	return;
}

void lcd::fill(uint8 bmp){
	uint8 y,x;
	for(y=0;y<8;y++)
	{
		this->writeCmd(0xb0+y);
		this->writeCmd(0x01);
		this->writeCmd(0x10);
		for(x=0;x<X_WIDTH;x++)
			this->writeData(bmp);
	}
}

void lcd::clear(){
	this->fill(0);
}

void lcd::printPos(uint8 x, uint8 y){
	Debug.assertDebug(x >= 0 && x < 128);
	Debug.assertDebug(y >= 0 && y < 64);
	
	uint8 data;  
	this->setPos(x, y);
	data = 0x01 << (y % 8);
	this->writeCmd(0xb0+(y>>3));
	this->writeCmd(((x&0xf0)>>4)|0x10);
	this->writeCmd((x&0x0f)|0x00);
	this->writeData(data);

}

void lcd::printVerLine(uint8 x, uint8 y, uint8 number){
	Debug.assertDebug((y+number) <= 63);
	
	uint8 divisor   = y / 8;
	uint8 remainder = y % 8;

	if(remainder + number > 55){
		this->setXY(x, divisor);
		this->writeData(numToHex(remainder, 7));
		for(int i = 1; i < 7; i++){
			this->setXY(x, i+divisor);
			this->writeData(numToHex(0, 7));
		}
		this->setXY(x, 7+divisor);
		this->writeData(numToHex(0, remainder+number-(divisor+6)*8));
	}else if(remainder + number > 47){
		this->setXY(x, divisor);
		this->writeData(numToHex(remainder, 7));
		for(int i = 1; i < 6; i++){
			this->setXY(x, i+divisor);
			this->writeData(numToHex(0, 7));
		}
		this->setXY(x, 6+divisor);
		this->writeData(numToHex(0, remainder+number-(divisor+5)*8));
	
	}else if(remainder + number > 39){
		this->setXY(x, divisor);
		this->writeData(numToHex(remainder, 7));
		for(int i = 1; i < 5; i++){
			this->setXY(x, i+divisor);
			this->writeData(numToHex(0, 7));
		}
		this->setXY(x, 5+divisor);
		this->writeData(numToHex(0,remainder+number-(divisor+4)*8));
	
	}else if(remainder + number > 31){
		this->setXY(x, divisor);
		this->writeData(numToHex(remainder, 7));
		for(int i = 1; i < 4; i++){
			this->setXY(x, i+divisor);
			this->writeData(numToHex(0, 7));
		}
		this->setXY(x, 4+divisor);
		this->writeData(numToHex(0, remainder+number-(divisor+3)*8));
	
	}else if(remainder + number > 23){
		this->setXY(x, divisor);
		this->writeData(numToHex(remainder, 7));
		for(int i = 1; i < 3; i++){
			this->setXY(x, i+divisor);
			this->writeData(numToHex(0, 7));
		}
		this->setXY(x, 3+divisor);
		this->writeData(numToHex(0, remainder+number-(divisor+2)*8));
	
	}else if(remainder + number > 15){
		this->setXY(x, divisor);
		this->writeData(numToHex(remainder, 7));
		for(int i = 1; i < 2; i++){
			this->setXY(x, i+divisor);
			this->writeData(numToHex(0, 7));
		}
		this->setXY(x, 2+divisor);
		this->writeData(numToHex(0, remainder+number-(divisor+1)*8));
	
	}else if(remainder + number > 7){
		this->setXY(x, divisor);
		this->writeData(numToHex(remainder, 7));
		this->setXY(x, 1+divisor);
		this->writeData(numToHex(0, remainder+number-divisor*8));
	}else{
		this->setXY(x, divisor);
		this->writeData(numToHex(remainder, 7));
	}
	
}

void lcd::writeChar(uint8 ch){
	uint8 c=0,i=0;
	c = ch-32;
	this->setPos(_lcd_x, _lcd_y); //输出字符
	for(i = 0;i < 6; i++){
		this->writeData(F6x8[c][i]);
	}
	_lcd_x+=6;                          //设置下一个点的位置
	if(_lcd_x >= 122){
		_lcd_y++;
		_lcd_x=0;
	}
}

void lcd::writeInt(int num){
	uint8 i=0;
	uint8 n[5]={0};
	
	if(num<0)				//判断正负
	{
		this->writeChar('-');
		num=-num;
	}
	
	while(num/10)
	{
		n[i]=num%10;
		num/=10;
		i++;
	}
	n[i]=num;		//最高位
	i++;
	while(i--)
		this->writeChar(n[i]+'0');
}

void lcd::writeFloat(float num, int sig){
	uint8 i=0;
	uint8 n[8]={0};
	uint16 inter=0;
	float fr=0.0;
	
	if(num<0)
	{
		this->writeChar('-');		//判断正负
		num=-num;
	}
	inter=(uint16)num;
	fr=num-inter;
	
	while(inter/10)			//输出整数部分
	{
		n[i]=inter%10;
		inter/=10;
		i++;
	}
	n[i]=inter;		//最高位
	i++;
	while(i--)
		this->writeChar(n[i]+'0');
	
	this->writeChar('.');			//输出小数点
	
	for(i=0;i<sig;i++)			//输出小数部分
	{
		fr*=10;
		this->writeChar((int)fr+'0');
		fr-=(int)fr;
	}
}

void lcd::wtireString(char *str){
	while (*str)
	{
		this->writeChar(*str);
		str++;
	}
}
int lcd::getStringCode(char *str){
	if(strcmp(str, "东") == 0) return 1;
	if(strcmp(str, "北") == 0) return 2;
	if(strcmp(str, "大") == 0) return 3;
	if(strcmp(str, "学") == 0) return 4;
}

void lcd::writeChinese(uint8 x, uint8 y, char* str){
	uint8 i = 0;
	int _x = x;
	int _y = y;
	int code = this->getStringCode(str);
	this->setPos(_x, _y);
	for(i = 0; i < 28; i += 2)
		this->writeData(F14x16[code][i]);
	this->setPos(_x, _y + 1);
	for(i = 1; i < 28; i += 2)
		this->writeData(F14x16[code][i]);
				
}
